
name: Daily build testing

on:
  push:
    branches: master

jobs:
  get-repos:
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.create-list.outputs.repos }}
    steps: 
      - uses: actions/checkout@v2
      - name: Get repos
        id: create-list
        # run: echo "::set-output name=repos::$(python3 .github/workflows/get-repos.py)"
        run: echo "::set-output name=repos::[ 'guide-maven-intro' ]"
  get-builds:
    runs-on: ubuntu-latest
    outputs:
      builds: ${{ steps.create-list.outputs.builds }}
    steps: 
      - uses: actions/checkout@v2
      - name: Get builds
        id: create-list
        run: echo "::set-output name=builds::$(python3 .github/workflows/get-builds.py)"
  create-config-matrix:
    runs-on: ubuntu-latest
    needs: [ get-repos, get-builds ]
    env:
      REPOS: ${{ needs.get-repos.outputs.repos }}
      BUILDS: ${{ needs.get-builds.outputs.builds }}
    outputs:
      matrix: ${{ steps.create-matrix.outputs.matrix }}
    steps:
      - name: Create matrix
        id: create-matrix
        run: |
          matrix="{ \"repos\":$REPOS , \"builds\":$BUILDS }"
          echo "::set-output name=matrix::$matrix" 
  test-guide:
    runs-on: ubuntu-latest
    needs: [ create-config-matrix ]
    strategy:
      max-parallel: 5
      matrix: ${{ fromJson(needs.create-config-matrix.outputs.matrix) }}
    steps:
      - name: Clone ${{ matrix.repos }}
        uses: actions/checkout@v2
        with:
          repository: OpenLiberty/${{ matrix.repos }}
          path: ${{ matrix.repos }}
          ref: refs/heads/gh-actions
      - name: Set permissions
        run: chmod +x ${{ matrix.repos }}/scripts/*.sh
      - name: Run tests for ${{ matrix.repos }}
        working-directory: ${{ matrix.repos }}/finish
        run: sudo ../scripts/dailyBuild.sh -t ${{ matrix.builds.date }} -d ${{ matrix.builds.driver_location }} -b ${{ matrix.builds.build_level }}
      - name: Post tests
        working-directory: ${{ matrix.repos }}
        if: always()
        run: |
          logsPath=$(sudo find . -name "console.log");
          sudo cat $logsPath | grep Launching
          sudo cp $logsPath/console.log $GITHUB_WORKSPACE
      - name: Archive server logs if failed
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: console.log
          path: $GITHUB_WORKSPACE
